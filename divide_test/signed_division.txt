//Load MSB of dividend*/
inc 1
inc 1
inc 1
inc 1
inc 1
inc 1
inc 1 //r1 = 7
inc 5
sll 5 1
tr 2 5 //r2 = 128
lw 5 2 //r5 = MSB(dividend)

//Check if MSB of dividend is negative*/
slt 5 0 // MSB negative?
beq 0 11 // if Divisor < 0: r11 = 0
jr 22 // MSB is positive, skip negative block

//beq: Dividend is Negative. Load LSB of
//dividend from M[129]. NOT it. Add 1.
//Not MSB. Add carry bit.*/
add 4 2 9
inc 9
tr 3 9
lw 7 3
not 7
inc 7 //r7 = ~LSB(dividend)+1
tr 3 12 //r3 = carry
not 5 //r5 = ~MSB(dividend)
add 5 3 9 //r9 = ~MSB(dividend)+carry

//beq: Dividend is Negative. Write
//M[128] with MSB. Write M[129] with
//LSB. Write M[1] with negative flag*/
add 4 2 8 //r8 = 128
tr 5 8
tr 1 9 //r1 = ~MSB(dividend)+carry
sw 5 1 //M[128] = MSB(dividend)
inc 5 //r5 = 129
tr 1 7 //r1 = ~LSB(dividend)+1
sw 5 1 //M[129] = LSB(dividend)
inc 4 //r4 = 1
addi 8 0 0
inc 8 //r8 = 1
tr 2 8 //r2 = 1
sw 4 2 //M[1] = 1

// beq: Dividend is Positive. Do nothing.

//Load divisor from M[130]. Check if
//divisor is negative
inc 2
inc 2 //r2 = 130
lw 5 2 //r5 = M[130]
slt 5 0 // Divisor negative?
beq 0 11 // if Divisor < 0: r11 = 0
jr 11 // Divisor is positive, skip negative block

//beq: Divisor is Negative. NOT the
//divisor. Add 1. Store in M[130]. Store
//M[2] with negative flag.
addi 8 0 0
inc 8
tr 5 8 // r5 = 1
tr 4 8 // r4 = 1
not 9
inc 9 // r9 = ~divisor+1
tr 1 9 // r1 = ~divsor+1
sw 2 1 //M[130] = ~divisor+1
inc 5 //r5 = 2
sw 5 4 //M[2] = 1

//beq: Divisor is Positive. Do nothing.

//Loop Setup. Clear all registers.
addi 8 0 0 //r8 = 0
addi 9 0 0
addi 10 0 0
addi 11 0 0
tr 1 8
tr 2 8
tr 3 8
tr 4 8
tr 5 8
tr 6 8
tr 7 8


//Loop Setup. Initialize memory:
//M[3] = i
//M[4] = 16
//M[5] = MSB(mask)
//M[6] = LSB(mask)
//M[7] = MSB(quotient)
//M[8] = LSB(quotient)
//M[9] = MSB(div_temp)
//M[10] = LSB(div_temp)
inc 5
inc 5
inc 5
sw 5 0 //M[3] = 0 (initial i)
inc 6
inc 1
inc 1
inc 1
inc 1
sll 6 1 //r6 = 16
tr 1 6 //r1 = 16
inc 5
sw 5 1 //M[4] = 16 (loop stop)
inc 5
sw 5 0 //M[5] = 0 (MSB of mask)
inc 5
inc 2 //r2 = 1
sw 5 2 //M[6] = 1 (LSB of mask)
inc 5
sw 5 0 //M[6] = 0 (MSB quotient)
inc 5 //r5 = 8
sw 5 0 //M[8] = 0 (LSB quotient)
inc 5
sw 5 0 //M[9] = 0 MSB(div_temp)
inc 5
sw 5 0 //M[10] = 0 LSB(div_temp)

//BEGIN LOOP. Load i value. Calculate
//15-i.
addi 8 0 0 //r8 = 0(reset)
inc 8
inc 8
inc 8
tr 5 8
tr 3 8
lw 6 3 //r6 = i
add 5 3 8
tr 5 8 //r5 = 6
tr 3 8 //r3 = 6
add 5 3 8
inc 8
inc 8
inc 8 //r8 = 15
tr 7 8 //r7 = 15
tr 2 6 //r2 = i
sub 7 2 9 //r9 = 15-i

//Load MSB of mask from M[5]
//Load LSB of mask from M[6]
addi 8 0 0
tr 1 8
inc 1
inc 1
inc 1
inc 1
inc 1
lw 5 1 //r5 = MSB(mask)
inc 1
lw 6 1 //r6 = LSB(mask)

//Shift mask left by 15-i
tr 1 9 //r1 = 15-i
sll 5 1 //r5 = MSB(mask) << 15-i
sll 6 1

tr 2 12
or 6 2
tr 6 11 //r6 = LSB(mask) << 15-i

//Load MSB of dividend from M[128]
//Load LSB of dividend from M[129]
addi 8 0 0
tr 1 8
tr 5 8
inc 1
inc 1
inc 1
inc 1
inc 1
inc 1
inc 1 //r1 = 7
inc 5
sll 5 1
tr 2 5 //r2 = 128
lw 4 2 //r4 = MSB(dividend)
inc 2
lw 7 2 //r7 = LSB(dividend)

//AND dividend with mask.
tr 1 5 //r1 = MSB(mask) << 15-i
and 4 1
tr 5 11 //r5 = MSB(mask) & MSB(dividend)
tr 2 6 //r2 = LSB(mask) << 15-i
and 7 2
tr 6 11 //r6 = LSB(mask) & LSB(dividend)

//Shift result right by 15-i to get
//dividend_temp.
tr 1 9 //r1 = 15-i
srl 6 1
srl 5 1 //r5 = MSB(dividend_temp)
tr 2 12
or 6 2
tr 6 11 //r6 = LSB(dividend_temp)

//Load MSB(div_temp) from M[9].
//Load LSB(div_temp) from M[10]*/
addi 8 0 0
tr 2 8
inc 2
inc 2
inc 2
inc 2
inc 2
inc 2
inc 2
inc 2
inc 2
lw 4 2 //r4 = MSB(div_temp)
inc 2
lw 7 2 //r7 = LSB(div_temp)

//Shift div_temp left 1.
inc 8
tr 1 8 //r1 = 1
sll 4 1 //r4 = MSB(div_temp) << 1
sll 7 1
tr 2 12
or 7 2
tr 7 11 //r7 = LSB(div_temp) << 1

//Add LSB(div_temp)+LSB(dividend_temp)
//Add carry+MSB(div_temp)
//Add MSB(div_temp)+MSB(dividend_temp)
tr 3 6
add 7 3 8 //r8 = LSB(div_temp)
tr 3 12
add 4 3 9
tr 3 9
add 5 3 10 //r10 = MSB(div_temp)

//Write MSB(div_temp) to M[9]
//Write LSB(div_temp) to M[10]

//Load MSB of quotient from M[7]
//Load LSB of quotient from M[8]
addi 8 0 0
tr 1 8
inc 1
inc 1
inc 1
inc 1
inc 1
inc 1
inc 1
lw 5 1 //r5 = MSB(quotient)
inc 1
lw 6 1 //r6 = LSB(quotient)

//Shift quotient left 1.
inc 8
tr 1 8 //r1 = 1
sll 5 1 //r5 = MSB(quotient) << 1
sll 6 1
tr 2 12
or 6 2
tr 6 11 //r6 = LSB(quotient) << 1

//Load divisor from M[130]
//Compare with div_temp

//beq: div_temp >= divisor

//beq: div_temp < divisor

//Write MSB(div_temp) to M[9]
//Write LSB(div_temp) to M[10]*/

//beq: i < 16*/
//beq: i >= 16*/
//END LOOP*/

//Load M1. Load M2. Subtract and check*/

//beq: Result is negative. Twos comp*/

//beq: Result is positive. Write MSB
//of quotient to M[126]. Write LSB of
//quotient to M[127].

halt
