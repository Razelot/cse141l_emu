inc 5
inc 1
sll 5 1 //2
inc 5
sll 5 1 //3
inc 5
sll 5 1 //4
inc 5
sll 5 1 //5
inc 5
sll 5 1 //6
inc 5
sll 5 1 //7
inc 5
sll 5 1 //8
inc 5
tr 1 5 //r1 = 255
inc 6
sw 6 1 //M[1] = 255
not 1
inc 1
inc 1 
inc 1
inc 1
inc 1
inc 1
inc 1
inc 1
inc 1 //r1 = 9
inc 2 //r2 = 1
lw 7 1 //r7 = M[r1] 
tr 3 7 //r3 = SEQUENCE TO SEARCH

addi 11 1 3 //r11 = 12
tr 5 11 //r5 = 12
add 5 1 11 //r11 = 12 + 9 = 21
tr 5 11 //r5 = 21
add 5 1 11 //r11 = 21 + 9 = 30
inc 11 
inc 11 //r11 = 32
tr 1 11 //r1 = 32 (STRING ADDRESS)

lw 7 1 //r7 = M[r1] = start of string
inc 1 // increment STRING ADDRESS
lw 6 1 //LOAD 2ND BYTE
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE //34
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 35
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 36
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 37
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 38
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 39
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 40
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 41
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 42
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 43
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 44
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 45
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 46
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 47
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 48
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 49
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 50
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 51
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 52
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 53
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 54
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 55
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 56
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 57
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 58
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 59
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 60
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 61
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 62
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 63
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 64
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 65
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 66
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 67
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 68
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 69
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 70
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 71
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 72
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 73
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 74
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 75
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 76
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 77
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 78
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 79
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 80
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 81
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 82
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 83
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 84
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 85
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 86
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 87
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 88
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 89
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 90
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 91
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 92

tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 93 
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 94
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

srl 7 2 //shift first byte >> 1
srl 6 2 //shift 2nd byte >> 1
tr 2 12 //tranfer cb as msb into 2
or 7 2 //append cb as msb to first byte
tr 7 11
tr 5 7 //5 = 1ST BYTE
tr 2 9
inc 2
sll 5 2
sll 5 2	
sll 5 2
sll 5 2

srl 5 2
srl 5 2
srl 5 2
srl 5 2 //zero the upper 4 bits
tr 8 5 //transfer reg 5 to reg 8
beq 3 8 //check if seq = string   <<<<<<
jr 2
inc 10 //if equal INCREMENT COUNTER
lw 5 2
tr 2 5
beq 2 10
jr 2
halt
tr 2 9
inc 2

inc 1
lw 6 1 //LOAD 2ND BYTE 95

